package restassuredtestcases;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.hasItems;
import static org.hamcrest.Matchers.equalTo;
import org.json.simple.JSONObject;
import org.testng.annotations.Test;
import static io.restassured.RestAssured.*;

import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import io.restassured.filter.log.LogDetail;
import io.restassured.http.ContentType;
import io.restassured.matcher.ResponseAwareMatcher;
import io.restassured.response.Response;

public class Assignment8 {


@Test

public void getValidateUserNotFound() {
	baseURI = "https://reqres.in/api";
	
	given()
	     .get("/users/23")
	.then()
	      .statusCode(404)
	      
	      .log().ifStatusCodeIsEqualTo(404)
	      
	      .log().ifValidationFails(LogDetail.STATUS)
	      
	      .log().everything();
	
}

@Test

public void getValidateListResource() {
	baseURI = "https://reqres.in/api";
	
	given()
	     .get("/unknown")
	.then()
	      .statusCode(200)
	      
	      .log().ifStatusCodeIsEqualTo(200)

	      .log().ifValidationFails(LogDetail.STATUS)
	      .log().all();	
}

@Test

public void getValidateSingleResource() {
	baseURI = "https://reqres.in/api";
	
	given()
	     .get("/unknown/2")
	.then()
	      .statusCode(200)
	      
	      .body("data.id", equalTo(2))
	      
	      .body("data.name", equalTo("fuchsia rose"))
	      
	      .body("data.year", equalTo(2001))
	      
	      .log().ifStatusCodeIsEqualTo(200)
	      
	      .log().everything();
}

@Test

public void getValidateSingleResourceUserNotFound() {
	baseURI = "https://reqres.in/api";
	
	given()
	     .get("/unknown/23")
	.then()
	      .statusCode(404)
	      
	      .log().ifStatusCodeIsEqualTo(404)
	      
	      .log().everything();	
}


	
	@Test
	public void testPostRequestRegisterSuccesful() {
	baseURI = "https://reqres.in/api";


	JSONObject json = new JSONObject();
	json.put("email", "eve.holt@reqres.in");
	json.put("password", "pistol");

	System.out.println(json.toJSONString());


	given()
	.body(json.toJSONString())

	.header("Connection", "Keep-alive")
	.contentType(ContentType.JSON)
	.accept(ContentType.JSON)

	.when()
	.post("/register")
	
	.then()
	.statusCode(200)
	
	.log().ifStatusCodeIsEqualTo(200)
	.log().all();
	
	}


	@Test
	public void testPostRequestRegisterUnsuccessful() {
	baseURI = "https://reqres.in/api";


	JSONObject json = new JSONObject();
	json.put("email", "sydney@fife");


	System.out.println(json.toJSONString());


	given()
	
	.body(json.toJSONString())

	.header("Connection", "Keep-alive")
	.contentType(ContentType.JSON)
	.accept(ContentType.JSON)

	.when()
	.post("/register")
	
	.then()
	.statusCode(400)
	
	.body("error", equalTo("Missing password"))
	.log().body();
	
	}



@Test

public void testPostloginUnSuccessful() {
	baseURI = "https://reqres.in";
	
	JSONObject reqData = new JSONObject();
	
	reqData.put("email","peter@klaven");
	
	
	System.out.println(reqData.toJSONString());
	
	given()
	      .body(reqData.toJSONString())
	.when()
	      .post("/api/login")
	.then()
	
	    .log().status()
	    .log().ifStatusCodeIsEqualTo(400)
   
            
	    .log().all();
	    
	
}


}
